#!/bin/sh
############################################################################
if ! which ts > /dev/null
then
  printf "%s\n\n%s\n\n" \
  'Could not find ts.  Try adding the ts bin dir to your PATH.' \
  '  export PATH="$(pwd)/bin:$PATH"'
  exit 1
fi

. ts

setup () {
# ensure ts called in the tests will not collide with the suite itself
export TS_TMP_DIR="$test_dir"
}

#
# ts test
#

test_ts_runs_files () {
ts -as test/ts/pass test/ts/fail 2>/dev/null |
assert_output "\
P [test/ts/pass:8] test_pass

F [test/ts/fail:8] test_fail

" -
}

test_script_runs_named_tests () {
./test/ts/pattern -as test_a | assert_output "\
P [./test/ts/pattern:8] test_a

"
}

test_script_runs_all_tests_by_default () {
./test/ts/pattern -as | assert_output "\
P [./test/ts/pattern:8] test_a

P [./test/ts/pattern:12] test_z

"
}

#
# -a option
#

test_ts_does_not_print_passing_tests_by_default () {
ts -s test/ts/pass test/ts/fail | assert_output "\
F [test/ts/fail:8] test_fail

" -
}

test_ts_a_options_prints_all_tests () {
ts -as test/ts/pass test/ts/fail | assert_output "\
P [test/ts/pass:8] test_pass

F [test/ts/fail:8] test_fail

" -
}

test_script_does_not_print_passing_tests_by_default () {
./test/ts/pass -s | assert_output "" -
}

test_script_a_options_prints_all_tests () {
./test/ts/pass -as | assert_output "\
P [./test/ts/pass:8] test_pass

" -
}

#
# -c option
#

test_ts_c_option_prints_color_output () {
ts -asc test/ts/output 2>&1 |
assert_output "\
[[32mtest/ts/output:4[0m] test_output_a
  out

[[32mtest/ts/output:10[0m] test_output_b
  oot

" -
}

test_script_c_option_prints_color_output () {
./test/ts/output -asc 2>&1 |
assert_output "\
[[32m./test/ts/output:4[0m] test_output_a
  out

[[32m./test/ts/output:10[0m] test_output_b
  oot

" -
}

#
# -m option
#

test_ts_m_option_monitors_output () {
ts -am test/ts/output 2>&1 |
sed -e "s/[0-9] s/# s/" |
assert_output "\
..

[test/ts/output:4] test_output_a
  out
P

[test/ts/output:10] test_output_b
  oot
P

2 pass 0 fail # s
" -
}

test_script_m_option_monitors_output () {
./test/ts/output -am 2>&1 |
sed -e "s/[0-9] s/# s/" |
assert_output "\
..

[./test/ts/output:4] test_output_a
  out
P

[./test/ts/output:10] test_output_b
  oot
P

2 pass 0 fail # s
" -
}

#
# -h option
#

test_ts_h_prints_help () {
out=`ts -h`
assert_match "usage:" "$out"
}

test_script_h_prints_help () {
out=`./test/ts/output -h`
assert_match "usage:" "$out"
}

#
# -r option
#

test_ts_r_option_prints_raw_output () {
ts -r test/ts/output | assert_output "\
[test/ts/output:4] test_output_a
P 4
outx
[test/ts/output:10] test_output_b
P 4
ootx
" -
}

test_script_r_option_prints_raw_output () {
./test/ts/output -r | assert_output "\
[./test/ts/output:4] test_output_a
P 4
outx
[./test/ts/output:10] test_output_b
P 4
ootx
" -
}

#
# -s option
#

test_ts_s_option_prints_structured_output () {
ts -as test/ts/output | assert_output "\
P [test/ts/output:4] test_output_a
  out

P [test/ts/output:10] test_output_b
  oot

" -
}

test_script_s_option_prints_structured_output () {
./test/ts/output -as | assert_output "\
P [./test/ts/output:4] test_output_a
  out

P [./test/ts/output:10] test_output_b
  oot

" -
}

#
# -v option
#

test_ts_displays_stdout () {
ts -as test/ts/output | assert_output "\
P [test/ts/output:4] test_output_a
  out

P [test/ts/output:10] test_output_b
  oot

" -
}

test_ts_v_opton_displays_stderr () {
ts -asv test/ts/output | assert_output "\
P [test/ts/output:4] test_output_a
  outerr

P [test/ts/output:10] test_output_b
  ootear

" -
}

test_script_displays_stdout () {
./test/ts/output -as | assert_output "\
P [./test/ts/output:4] test_output_a
  out

P [./test/ts/output:10] test_output_b
  oot

" -
}

test_script_v_opton_displays_stderr () {
./test/ts/output -asv | assert_output "\
P [./test/ts/output:4] test_output_a
  outerr

P [./test/ts/output:10] test_output_b
  ootear

" -
}

#
# assertions test
#

test_ts_assertions_pass () {
nfails=$(ts test/assertions/pass | grep -c '^F')
assert_output "0" "$nfails"
}

test_ts_assertions_fail () {
npass=$(ts test/assertions/fail | grep -c '^P')
assert_output "0" "$npass"
}

#
# exit status test
#

test_ts_exits_0_for_passing_test () {
ts test/ts/pass
assert_status 0 $?
}

test_ts_exits_1_for_failing_test () {
ts test/ts/fail >&2
assert_status 1 $?
}

test_script_exits_0_for_passing_test () {
./test/ts/pass
assert_status 0 $?
}

test_script_exits_1_for_failing_test () {
./test/ts/fail >&2
assert_status 1 $?
}

#
# misc
#

test_ts_prevents_hang_by_stdin () {
  # cat will hang if stdin is waiting
  cat | assert_output "" -
}

test_ts_return_fail_in_setup () {
ts -s test/ts/return_fail_in_setup | assert_output "\
F [test/ts/return_fail_in_setup:13] test_would_pass
  in setup
  in teardown

" -
}

test_ts_return_fail_in_teardown () {
ts -s test/ts/return_fail_in_teardown | assert_output "\
F [test/ts/return_fail_in_teardown:13] test_would_pass
  in setup
  in test
  in teardown

" -
}

test_ts_exit_fail_in_setup () {
ts -s test/ts/exit_fail_in_setup | assert_output "\
F [test/ts/exit_fail_in_setup:13] test_would_pass
  in setup

" -
}

test_ts_exit_fail_in_test () {
ts -s test/ts/exit_fail_in_test | assert_output "\
F [test/ts/exit_fail_in_test:12] test_would_pass
  in setup
  in test

" -
}

test_ts_exit_fail_in_teardown () {
ts -s test/ts/exit_fail_in_teardown | assert_output "\
F [test/ts/exit_fail_in_teardown:13] test_would_pass
  in setup
  in test
  in teardown

" -
}
