#!/bin/sh
############################################################################
if [ -e bin/ts ]
then export PATH="$PWD/bin:$PATH"
else printf "Tests must be run from ts project root\n"
     exit 1
fi

setup () {
unset $(set | grep '^TS_' | sed -e 's/=.*//' | tr "\n" " ")
export TS_TMP_DIR="$ts_test_dir"
}

#
# ts test
#

test_ts_runs_file () {
ts -as test/pass | assert_output "\
P [test/pass:3] test_pass

"
}

test_ts_runs_multiple_files () {
ts -as test/pass test/fail | assert_output "\
P [test/pass:3] test_pass

F [test/fail:3] test_fail

"
}

test_script_runs_tests () {
./test/testcases/abc -as | assert_output "\
P [./test/testcases/abc:3] test_a
  a

P [./test/testcases/abc:9] test_b
  b

F [./test/testcases/abc:15] test_c
  c

"
}

test_script_runs_named_tests () {
./test/testcases/abc -as test_a test_c | assert_output "\
P [./test/testcases/abc:3] test_a
  a

F [./test/testcases/abc:15] test_c
  c

"
}

test_script_runs_tests_matching_patterns () {
./test/testcases/abc -as 'test_[ac]' | assert_output "\
P [./test/testcases/abc:3] test_a
  a

F [./test/testcases/abc:15] test_c
  c

"
}

#
# options test
#

test_ts_accepts_options_anywhere () {
ts test/pass -a test/fail -s 2>/dev/null |
assert_output "\
P [test/pass:3] test_pass

F [test/fail:3] test_fail

"
}

test_script_accepts_options_anywhere () {
./test/testcases/abc test_a -a test_c -s | assert_output "\
P [./test/testcases/abc:3] test_a
  a

F [./test/testcases/abc:15] test_c
  c

"
}

#
# -a option
#

test_ts_does_not_print_passing_tests_by_default () {
ts -s test/pass test/fail | assert_output "\
F [test/fail:3] test_fail

"
}

test_ts_a_option_prints_all_tests () {
ts -as test/pass test/fail | assert_output "\
P [test/pass:3] test_pass

F [test/fail:3] test_fail

"
}

test_script_does_not_print_passing_tests_by_default () {
./test/pass -s | assert_output ""
}

test_script_a_option_prints_all_tests () {
./test/pass -as | assert_output "\
P [./test/pass:3] test_pass

"
}

#
# -c option
#

test_ts_c_option_prints_green_red_color_output () {
ts -asc test/testcases/abc | assert_output "\
[[32mtest/testcases/abc:3[0m] test_a
  a

[[32mtest/testcases/abc:9[0m] test_b
  b

[[1;31mtest/testcases/abc:15[0m] test_c
  c

"
}

test_script_c_option_prints_color_output () {
./test/testcases/abc -asc | assert_output "\
[[32m./test/testcases/abc:3[0m] test_a
  a

[[32m./test/testcases/abc:9[0m] test_b
  b

[[1;31m./test/testcases/abc:15[0m] test_c
  c

"
}

#
# -d option
#

# bash does '+++'
# dash does '+'
# zsh adds trailing whitespace to ts_exitstatus
normalize_debug_output () {
sed -e '
  s/+\{1,\}/+++/
  s/ts_exitstatus=0 /ts_exitstatus=0/
'
}

test_ts_d_option_turns_on_xtrace_and_verbose () {
ts -dsa test/pass | normalize_debug_output | assert_output "\
P [test/pass:3] test_pass
  +++ trap teardown EXIT
  +++ setup
  +++ true
  +++ test_pass
  +++ true
  +++ ts_exitstatus=0
  +++ trap - EXIT
  +++ teardown
  +++ true
  +++ return 0

"
}

test_script_d_option_turns_on_xtrace_and_verbose () {
./test/pass -dsa | normalize_debug_output | assert_output "\
P [./test/pass:3] test_pass
  +++ trap teardown EXIT
  +++ setup
  +++ true
  +++ test_pass
  +++ true
  +++ ts_exitstatus=0
  +++ trap - EXIT
  +++ teardown
  +++ true
  +++ return 0

"
}

#
# -m option
#

test_ts_m_option_monitors_output () {
ts -am test/testcases/abc 2>&1 |
sed -e '$ s/[-0-9]\{1,\} s/# s/' |
assert_output "\
..F

[test/testcases/abc:3] test_a
  a
P

[test/testcases/abc:9] test_b
  b
P

[test/testcases/abc:15] test_c
  c
F

2 pass 1 fail # s
"
}

test_script_m_option_monitors_output () {
./test/testcases/abc -am 2>&1 |
sed -e "s/[-0-9]\{1,\} s/# s/" |
assert_output "\
..F

[./test/testcases/abc:3] test_a
  a
P

[./test/testcases/abc:9] test_b
  b
P

[./test/testcases/abc:15] test_c
  c
F

2 pass 1 fail # s
"
}

#
# -h option
#

test_ts_h_prints_help () {
ts -h | grep -q "usage:"
}

test_script_h_prints_help () {
./test/pass -h | grep -q "usage:"
}

#
# -r option
#

test_ts_r_option_removes_tmp_dir () {
tmpdir="$ts_test_dir/tmp"
ts -r -t "$tmpdir" test/pass
[ ! -e "$tmpdir" ]
}

test_script_r_option_removes_tmp_dir () {
tmpdir="$ts_test_dir/tmp"
./test/pass -r -t "$tmpdir"
[ ! -e "$tmpdir" ]
}

#
# -s option
#

test_ts_s_option_prints_structured_output () {
ts -as test/testcases/abc | assert_output "\
P [test/testcases/abc:3] test_a
  a

P [test/testcases/abc:9] test_b
  b

F [test/testcases/abc:15] test_c
  c

"
}

test_script_s_option_prints_structured_output () {
./test/testcases/abc -as | assert_output "\
P [./test/testcases/abc:3] test_a
  a

P [./test/testcases/abc:9] test_b
  b

F [./test/testcases/abc:15] test_c
  c

"
}

#
# -v option
#

test_ts_displays_stdout () {
ts -as test/testcases/abc | assert_output "\
P [test/testcases/abc:3] test_a
  a

P [test/testcases/abc:9] test_b
  b

F [test/testcases/abc:15] test_c
  c

"
}

test_ts_v_opton_displays_stderr () {
ts -asv test/testcases/abc | assert_output "\
P [test/testcases/abc:3] test_a
  aA

P [test/testcases/abc:9] test_b
  bB

F [test/testcases/abc:15] test_c
  cC

"
}

test_script_displays_stdout () {
./test/testcases/abc -as | assert_output "\
P [./test/testcases/abc:3] test_a
  a

P [./test/testcases/abc:9] test_b
  b

F [./test/testcases/abc:15] test_c
  c

"
}

test_script_v_opton_displays_stderr () {
./test/testcases/abc -asv | assert_output "\
P [./test/testcases/abc:3] test_a
  aA

P [./test/testcases/abc:9] test_b
  bB

F [./test/testcases/abc:15] test_c
  cC

"
}

#
# examples test
#

test_ts_pass_examples () {
nfails=$(ts -as test/examples/pass | grep -c '^F')
assert_output "0" "$nfails"
}

test_ts_fail_examples () {
npass=$(ts -as test/examples/fail | grep -c '^P')
assert_output "0" "$npass"
}

#
# exit status test
#

test_ts_exits_0_for_passing_test () {
ts test/pass
assert_status 0 $?
}

test_ts_exits_1_for_failing_test () {
ts test/fail >&2
assert_status 1 $?
}

test_script_exits_0_for_passing_test () {
./test/pass
assert_status 0 $?
}

test_script_exits_1_for_failing_test () {
./test/fail >&2
assert_status 1 $?
}

#
# testcases
#

test_ts_prevents_hang_by_stdin () {
# cat hangs if stdin is waiting
cat | assert_output ""
}

test_ts_return_fail_in_setup () {
ts -s test/testcases/return_fail_in_setup | assert_output "\
F [test/testcases/return_fail_in_setup:12] test_return_fail_in_setup
  in setup
  in teardown

"
}

test_ts_return_fail_in_teardown () {
ts -s test/testcases/return_fail_in_teardown | assert_output "\
F [test/testcases/return_fail_in_teardown:12] test_return_fail_in_teardown
  in setup
  in test
  in teardown

"
}

test_ts_exit_fail_in_setup () {
ts -s test/testcases/exit_fail_in_setup | assert_output "\
F [test/testcases/exit_fail_in_setup:12] test_exit_fail_in_setup
  in setup
  in teardown

"
}

test_ts_exit_fail_in_test () {
ts -s test/testcases/exit_fail_in_test | assert_output "\
F [test/testcases/exit_fail_in_test:11] test_exit_fail_in_test
  in setup
  in test
  in teardown

"
}

test_ts_exit_fail_in_teardown () {
ts -s test/testcases/exit_fail_in_teardown | assert_output "\
F [test/testcases/exit_fail_in_teardown:12] test_exit_fail_in_teardown
  in setup
  in test
  in teardown

"
}

test_ts_allows_exit_trap () {
trap "exit 0" EXIT
exit 1
}

test_ts_exit_fail_after_untrap_EXIT_in_test () {
ts -s test/testcases/exit_fail_in_test_after_untrap | assert_output "\
F [test/testcases/exit_fail_in_test_after_untrap:11] test_exit_fail_in_test_after_untrap
  in setup
  in test

"
}

test_include () {
ts test/testcases/include 2>&1 | grep -q '4 pass 0 fail'
}

#
# readme test
#

test_ts_readme () {
! ts -as test/readme/example | grep -q '^F' &&
! ts -as test/readme/troubleshoot_fail | grep -q '^P' &&
! ts -as test/readme/troubleshoot_pass | grep -q '^F' &&
! ts -as test/readme/usage | grep -q '^F'
}

. ts
