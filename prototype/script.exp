#!/usr/bin/env expect --

# http://stackoverflow.com/questions/5302120/general-string-quoting-for-tcl
proc escape {str} {
  subst -nocommands -novariables $str
}

proc command {prompt str} {
  set str [escape $str]
  expect $prompt { 
    send $str
    send_user $str
  }
}

proc response {str} {
  set str [escape $str]
  expect {
    -ex $str { }
    timeout  { exit 1 }
  }
}

# http://stackoverflow.com/questions/4346750/regular-expression-literal-text-span
proc re_response {str} {
  set str [regsub -all {\W} [escape $str] {\\&}]
  expect {
    -re .*$str { }
    timeout  { exit 1 }
  }
}

proc script {shell ps1 ps2 script} {
  global spawn_id

  set stty_init raw
  stty rows 25
  stty columns 80
  spawn -noecho /usr/bin/env "PS1=$ps1" "PS2=$ps2" $shell

  set i 0
  set max [llength $script]
  while { $i < $max } {
    set arg [lindex $script $i]
  
    switch -- $arg {
      $       { incr i; command $ps1 [lindex $script $i] }
      >       { incr i; command $ps2 [lindex $script $i] }
      ...     { incr i; re_response  [lindex $script $i] }
      -       { incr i; command ""   [lindex $script $i] }
      default { response $arg }
    }
  
    incr i
  }

  # wait
}

# exp_internal 1

# assert_script "\
# $ for n in one two; do
# >  echo $n
# > done
# one
# two
# "
script /bin/sh {$ } {> } {
  $ {for n in one two; do\u000A}
  > {  echo $n\u000A}
  > {done\u000A}
  {o} ... {e\u000A}
  {two\u000A}
  $ {exit\u000A}
}

# assert_script '\
# $ printf "%s\n" one two
# one
# two
# '
script /bin/sh {$ } {> } {
  $ {printf "%s\\n" one two\u000A}
  {one\u000A}
  {two\u000A}
  $ {exit\u000A}
}


# Makes me think that one-off simple stuff should be tested this
# way -- and what is the place for that?  If it's complex then
# perhaps it warrents it's own expect script.
#
# Maybe in that case provide some functions to call such that 
# the output from the expect script can be used by ts?

# set timeout 1
# assert_script "\
# $ c{{   }}
# Display all 123 possibilities? (y or n){{y}}
# ...
# --More--{{q}}
# $ c
# "
script /bin/sh {$ } {> } {
  $ {c		} {\u000A}
  {Display all 123 possibilities? (y or n)} - {y}
  ... 
  {--More--} - {\u0003}
  $ {exit\u000A}
}

script /bin/sh {$ } {> } {
  $ {gi	\u000A}
  $ {exit\u000A}
}
