#
#  Defines assertions and other functions needed
#  to run the tests.
#

usr_dir="${TS_USR_DIR:-$(pwd)}"
tmp_dir="${TS_TMP_DIR:-$usr_dir/tmp}"
keep_outputs="${TS_KEEP_OUTPUTS:-false}"
test_file=$0
test_name=$1
test_dir=$2
output=
status=

setup () {
  true
}

teardown () {
  true
}

# Flunks unless the numbers $1 (expected) and $2 (actual) are the same.
assert_status () {
  PS4="$PS4- "
  expected=$1; actual=$2

  if [ $actual -ne $expected ]
  then 
    printf "expected status $expected but was $actual\n"
    exit 1
  fi
  PS4="${PS4%- }"
}

# Flunks unless the strings $1 (expected) and $2 (actual) are the same.  Reads
# from stdin for '-'.
assert_output () {
  PS4="$PS4- "
  expected="$1"; actual="$2"

  if [ "$expected" = "-" ]
  then expected="$(cat)"
  fi

  if [ "$actual" = "-" ]
  then actual="$(cat)"
  fi

  if [ "$actual" != "$expected" ]
  then
    mkdir -p "$test_dir"
    printf "$expected" > "$test_dir.expect"
    printf "$actual"   > "$test_dir.actual"
    printf "unequal output:\n"
    diff "$test_dir.expect" "$test_dir.actual"
    exit 1
  fi
  PS4="${PS4%- }"
}

# # Normally stderr is directed at a trace file so that it can be used to debug
# # errors, and set -e is on so that any non-zero exit will terminate the
# # script.  Note stdout is still set to the terminal for inline debugging.
# #
# # capture sets stdout/stderr to the terminal and turns off set -e. The
# # terminal fd is saved to the fd (default 3) so that it can be restored by
# # capture_off. The idea is that within a capture the script behaves exactly as
# # normal.
# #
# # Note capture_off returns the same as the last command.
# capture_on () {
# 
# }
# 
# capture_off () {
# 
# }
# 
# # Runs the command and sets output,status to the stdout of the command and
# # status to the status of the command.  Does not exit if the command fails.
# capture () {
#   capture_on
#   output="$($@)"
#   status=$?
#   capture_off
# }

# Runs a specific test.  In that case the test output is not filtered or
# changed. the exit status is the exit status of the specific test.
run_test () {
  if [ "$test_name" = "" ]
  then
    run_test_suite
  else
    set -ex
    setup
    "$test_name"
    teardown
  fi
}

# Runs all tests in the test file, identified as functions named like 'test_'.
run_test_suite () {
  # NOTE test file must be a full path to protect the test_case assignment
  # from paths like "./path/to/test" which evaluates to "".
  test_file="$(cd $(dirname "$test_file"); pwd)/$(basename "$test_file")"
  test_case="$(basename "${test_file%\.*}")"
  test_case_dir="$tmp_dir/$test_case"

  grep -onE "^ *test_\w+ +\(\)" "$test_file" |
  tr -d " ()" |
  tr ":" " " |
  while read lineno test_name
  do
    test_dir="$test_case_dir/$test_name"
    rm -rf "$test_dir"

    # run the test by calling back into the test file
    # * use stdout for progress, stderr for debug information
    # * a zero exit status is considered a pass, otherwise fail
    #
    # NOTE an empty string is put onto stdin so that commands expecting stdin
    # will not hang the test (presumably no input will cause the test to fail
    # or the user can otherwise detect their mistake)
    printf "[$test_file:$lineno] $test_name\n"
    if echo "" | "$test_file" "$test_name" "$test_dir"
    then
      printf ".\n"
    else
      printf "exit: $?\nF\n"
    fi

    if [ "$keep_outputs" != "true" ]
    then rm -rf "$test_dir" "$test_dir".*
    fi
  done

  rmdir "$test_case_dir" "$tmp_dir" 2> /dev/null
}
