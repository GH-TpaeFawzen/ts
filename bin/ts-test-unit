############################################################################
# This file is meant to be sourced into the actual test file.
############################################################################

usr_dir="${TS_USR_DIR:-$(pwd)}"
tmp_dir="${TS_TMP_DIR:-$usr_dir/tmp}"
test_file="$0"
test_name="$1"

############################################################################

setup () {
  true
}

teardown () {
  true
}

# Flunks unless the numbers $1 (expected) and $2 (actual) are the same.
assert_status () {
  PS4="$PS4- "
  expected=$1; actual=$2

  if ! [ $actual -eq $expected ]
  then 
    printf "expected status $expected but was $actual\n"
    exit 1
  fi
  PS4="${PS4%- }"
}

# Flunks unless the strings $1 (expected) and $2 (actual) are the same.  Reads
# from stdin for '-'.
assert_output () {
  PS4="$PS4- "
  expected="$1"; actual="$2"

  # use x to protect against '-' on ancient systems
  if [ x"$expected" = x"-" ]
  then expected="$(cat)"
  fi

  if [ x"$actual" = x"-" ]
  then actual="$(cat)"
  fi

  if [ x"$actual" != x"$expected" ]
  then
    mkdir -p "$(dirname "$test_dir")"
    printf "%s" "$expected" > "$test_dir.expect"
    printf "%s" "$actual"   > "$test_dir.actual"
    printf "unequal output:\n"
    diff "$test_dir.expect" "$test_dir.actual"
    exit 1
  fi
  PS4="${PS4%- }"
}

# Runs a specific test.  In that case the test output is not filtered or
# changed. the exit status is the exit status of the specific test.
run_test () {
  if [ "" = "$test_name" ]
  then
    run_test_suite
    exit $?
  fi

  # close stdin so that commands expecting stdin will not hang
  exec <&-

  # prepare the test dir
  test_case="$(basename "$test_file")"
  test_case="${test_case%\.*}"
  test_dir="$tmp_dir/$test_case/$test_name"

  if [ -e "$test_dir" ] && ! rm -r "$test_dir"
  then
    printf "could not remove existing test dir: %s\n" "$test_dir" >&2
    exit 1
  fi

  setup
  "$test_name"
  teardown
}

# Runs all tests in the test file.
run_test_suite () {
  grep -onE "^ *test_\w+ +\(\)" "$test_file"  |
  tr -d " ()" |
  tr ":" " " |
  while read lineno test_name
  do
    # run the test by calling back into the test file
    # * use stdout for progress, stderr for debug information
    # * a zero exit status is considered a pass, otherwise fail
    printf "[$test_file:$lineno] $test_name\n"

    if "$test_file" "$test_name"
    then printf "P\n"
    else printf "exit: %s\nF\n" "$?"
    fi
  done
}
