.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "TS" "1" "September 2012" "1.0.0-beta" ""
.
.SH "NAME"
\fBts\fR \- run ts shell test scripts
.
.SH "SYNOPSIS"
\fBts\fR \fIoptions\fR TEST_SCRIPT\.\.\.
.
.P
\fB[\./test_script]\fR \fIoptions\fR TESTS\.\.\.
.
.SH "DESCRIPTION"
\fBts\fR provides functions for writing tests in shell\. The test scripts can be run individually or in a batch format using \fBts\fR as a command\.
.
.P
\fBts\fR makes a test directory available on a per\-test basis so it\'s easy to sandbox tests that write or manipulate files\. \fBts\fR tries to use POSIX exclusively and so should (hopefully) work on any POSIX\-compliant system\.
.
.SH "TEST SCRIPTS"
The \fBts\fR command expects script files that define test cases\. Test scripts have the following form:
.
.IP "" 4
.
.nf

[\./example]
#!/bin/sh               # pick a shell, any (POSIX) shell

setup () {              # optional setup
  mkdir \-p "$test_dir"
}

teardown () {           # optional teardown
  rm \-r "$test_dir"
}

test_a_thing () {       # write tests named like "test_"
  [ \-d "$test_dir" ]    # return 0 to pass\.
}

\[char46] ts                    # source ts to run the tests
.
.fi
.
.IP "" 0
.
.P
To run, use any of:
.
.IP "" 4
.
.nf

ts example              # run multiple test scripts
\[char46]/example               # run a single test script
\[char46]/example test_a_thing  # run a single test
.
.fi
.
.IP "" 0
.
.P
See the FUNCTIONS section for all functions available in tests\.
.
.SH "OPTIONS"
These options control how \fBts\fR operates:
.
.TP
\fB\-a\fR
Show passing outputs, which are normally filtered\.
.
.TP
\fB\-c\fR
Colorize output\. (green/red/yellow \- pass/fail/not\-executable)
.
.TP
\fB\-d\fR
Debug mode\. Turns on xtrace (set \-x) for the tests and enables \-v\.
.
.TP
\fB\-h\fR
Prints help\.
.
.TP
\fB\-m\fR
Monitor output\. Provide a ticker indicating the progress of tests and print a summary\. Monitor is the default\.
.
.TP
\fB\-r\fR
Remove the tmp dir on complete\. Removal is done using \fBrm \-r\fR\.
.
.TP
\fB\-s\fR
Stream output\. Show test progress as it happens\. No summary is printed\.
.
.TP
\fB\-t\fR
Set the test tmp dir (default tmp)\. The test\-specific directories are be located under this directory\.
.
.TP
\fB\-v\fR
Verbose output\. Enables \fBts\fR to display stderr for the tests (normally only stdout is shown)\.
.
.SH "FUNCTIONS"
Functions provided by \fBts\fR\.
.
.TP
\fBsetup\fR
A setup function run before each test\.
.
.TP
\fBteardown\fR
A teardown function run after each test\.
.
.IP
Note \fBts\fR ensures teardown runs by setting a trap for EXIT signals during setup and the actual test\. As a result, EXIT traps in tests can prevent teardown\.
.
.TP
\fBassert_status EXPECTED ACTUAL\fR
Exit 1 unless the numbers EXPECTED and ACTUAL are the same\.
.
.TP
\fBassert_output EXPECTED ACTUAL\fR
Exit 1 unless the variables EXPECTED and ACTUAL are the same\. Reads from stdin for \'\-\'\. Also reads ACTUAL from stdin if ACTUAL is not specified\.
.
.P
\fBts\fR reserves all function names starting with \'ts_\' for internal use\.
.
.SH "VARIABLES"
Variables provided by \fBts\fR at runtime\. Feel free to use any of them but treat them as read\-only\.
.
.TP
\fBtest_file\fR
The name of the current test script being run\.
.
.TP
\fBtest_case\fR
The basename of the test file, minus the extname\. Example: \'test/test_stuff\.sh\' => \'test_stuff\'
.
.TP
\fBtest_lineno\fR
The line number where the current test is defined\.
.
.TP
\fBtest_name\fR
The name of the current test\.
.
.TP
\fBtest_dir\fR
The test\-specific directory\. The test dir is \'tmp_dir/test_case\'\. \fBts\fR does not create this directory automatically\. Add that functionality in the setup function as needed\.
.
.P
\fBts\fR reserves all variables starting with \'ts_\' for internal use\.
.
.SH "ENVIRONMENT"
Default \fBts\fR behavior can be set via environment variables\. Options provided to \fBts\fR override these defaults\.
.
.TP
\fBTS_USR_DIR\fR (pwd)
The user dir\. Used to determine the ts tmp dir\.
.
.TP
\fBTS_TMP_DIR\fR (\fB$TS_USR_DIR/tmp\fR)
The base tmp dir\.
.
.TP
\fBTS_COLOR\fR (false)
Set to "true" to enable color\.
.
.TP
\fBTS_REMOVE_TMP_DIR\fR (false)
Set to "true" to remove tmp dir\.
.
.TP
\fBTS_SET_OPTIONS\fR (\-e)
Specifies shell options set (via \fBset\fR) before each test\. Debug adds \'\-x\'\.
.
.P
In addition these variables adjust the color output\.
.
.TP
\fBTS_PASS\fR (green)
Passing tests\.
.
.TP
\fBTS_FAIL\fR (red)
Failing tests\.
.
.TP
\fBTS_NOEX\fR (yellow)
Non\-executable test files\.
.
.TP
\fBTS_NORM\fR (normal)
The normal output color\.
.
.P
For example to turn failures blue:
.
.IP "" 4
.
.nf

export TS_FAIL=$(printf "%b" "\e033[0;34m")
.
.fi
.
.IP "" 0
.
.P
\fBts\fR reserves all variables starting with \'TS_\' for internal use\.
.
.SH "EXAMPLES"
Basic usage:
.
.IP "" 4
.
.nf

[\./example]
#!/bin/sh

test_pass () {
  true
}

test_assert_status_pass () {
  true
  assert_status 0 $?
}

test_assert_output_style_one () {
  out=$(printf "hello world")
  assert_output "hello world" "$out"
}

test_assert_output_style_two () {
  printf "hello world" | assert_output "hello world"
}

\[char46] ts
.
.fi
.
.IP "" 0
.
.P
Run like:
.
.IP "" 4
.
.nf

chmod +x example
ts example
.
.fi
.
.IP "" 0
.
.SH "INSTALLATION"
Add \fBts\fR to your PATH (or execute it directly)\. A nice way of doing so is to clone the repo and add the bin dir to PATH\. This allows easy updates via \fBgit pull\fR and should make the manpages available via \fBman ts\fR\.
.
.IP "" 4
.
.nf

git clone git://github\.com/thinkerbot/ts\.git
export PATH="$PATH:$(pwd)/ts/bin"
.
.fi
.
.IP "" 0
.
.SH "DEVELOPMENT"
Clone the repo as above\. To run the tests (written in \fBts\fR):
.
.IP "" 4
.
.nf

ts test/suite
.
.fi
.
.IP "" 0
.
.P
To generate the manpages:
.
.IP "" 4
.
.nf

make manpages
.
.fi
.
.IP "" 0
.
.SH "COPYRIGHT"
TS is Copyright (C) 2011 Simon Chiang \fIhttp://github\.com/thinkerbot\fR
