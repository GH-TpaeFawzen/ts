#!/bin/bash
# usage: ./Projectfile [command]
#############################################################################

images () {
for os in $(ls dockerfiles/)
do image "$os"
done
}

image () {
os="${1:-shell}"
docker build -f dockerfiles/"$os"/Dockerfile -t "ts:$os" . >&2
printf "%s\n" "ts:$os"
}

shell () {
os="${1:-shell}"
docker run -it --rm -v "$PWD:/app" "ts:$os" /bin/bash
}

test () {
image="${1:-ts:shell}"
shell="${2:-/bin/sh}"

# Switch /bin/sh so that all scripts will pick up the target shell as a part
# of shebang usage.  Assumes image runs as root user.
docker run --rm -i "$image" /bin/sh <<DOC
  if [ "$shell" != /bin/sh ]
  then ln -sf "$shell" /bin/sh
  fi
  ./test/suite
DOC
}

test-os () {
os="$1"
shift 1

if [ "$#" -eq 0 ]
then set /bin/sh
fi

os_dir="tmp/artifacts/$os"
mkdir -p "$os_dir"

buildlog="$os_dir/buildlog"
image="$(image "$os" 2>"$buildlog")"

for shell in "$@"
do
  printf "# %s %s\t" "$os" "$shell"
  outfile="$os_dir/$(basename "$shell")"
  test "$image" "$shell" >"$outfile" 2>&1
  tail -n 1 "$outfile"
  awk -v os="$os" -v shell="$shell" '
    /^\[/ { summary=$0 };
    /^[A-Z]/ { print $1 " " os " " shell "\t" summary }
  ' "$outfile"
done
}

test-all () {
test-os alpine /bin/bash /bin/zsh
test-os centos /bin/bash /bin/zsh /bin/ksh
test-os debian /bin/bash /bin/zsh /bin/ksh
test-os fedora /bin/bash /bin/zsh /bin/ksh
test-os opensuse /bin/bash /bin/zsh /bin/ksh
test-os ubuntu /bin/dash /bin/bash /bin/zsh /bin/ksh
}

#
# Release
#

prepare-release () {
ts_version="$1"
ts_release_date="$(date +"%Y-%m-%d")"

if [ -z "$ts_version" ]
then
  printf "no version specified\nusage: ./Bakefile prepare-release <version>\n" >&2
  exit 1
fi

if ! ./test/suite
then
  printf "cannot release (failing tests)\n" >&2
  exit 1
fi

# set new version
sed -i "" \
  -e "s/ts_version=.*/ts_version=\"$ts_version\"/" \
  -e "s/ts_release_date=.*/ts_release_date=\"$ts_release_date\"/" \
  ./bin/ts

# update the manpages
docker run --rm -i -v "$PWD:/app" "$(image shell)" /bin/bash <<DOC
mkdir -p man/man1
ronn -r --pipe --organization="$ts_version" --date="$ts_release_date" README.md > man/man1/ts.1
DOC

cat >&2 <<DOC

Next steps:

  git commit -a -m "Release $ts_version"
  git push origin master

  git tag "v$ts_version"  
  git push origin --tags

DOC
}

#
# Utility
#

list () {
compgen -A function 2>/dev/null
}

if list | grep -qFx -- "${1:-}"
then "$@"
else
  if [ -z "$1" ]
  then printf "no command specified (try 'list')\n" >&2
  else printf "unknown command: %s\n" "$1" >&2
  fi
  exit 1
fi
